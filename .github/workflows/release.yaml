name: Release

on:
  workflow_dispatch:
    inputs:
      branch_name:
        required: true
        type: string
        default: 'main'
        description: branch name that should be released
      version:
        required: false
        type: string
        default: ''
        description: Specifies the newly released version (without v). Keep blank to infer version from gradle.properties
      latest:
        required: true
        default: true
        type: boolean
        description: configures GitHub release as the latest one (e.g. false when releasing patches for older versions)

jobs:
  release-to-central:
    runs-on: ubuntu-latest
    permissions:
      # write permission is required to create a GitHub release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the current version
        id: current_version
        shell: bash
        # language=bash
        run: |
          if [[ -n "${{ inputs.version }}" ]]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=$(grep "^profiler.version=" gradle.properties | cut -d'=' -f2)
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        uses: actions/github-script@v7
        env:
          VERSION: ${{ steps.current_version.outputs.version }}
        with:
          # language=javascript
          script: |
             const tag = `v${process.env.VERSION}`;
             // Check if the tag exists
             const { data: tags } = await github.rest.git.listMatchingRefs({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 ref: `tags/${tag}`
             });
             if (tags.length > 0) {
                 core.setFailed(`Tag ${tag} already exists. Bump version in gradle.properties and try releasing again.`);
             }

      - name: Update version in gradle.properties to ${{ steps.current_version.outputs.version }}
        uses: ./.github/actions/update_version
        with:
          version: ${{ steps.current_version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17
          server-id: central

      # Publish to Central before generating a tag, so we don't need to drop the tag if
      # Central deployment fails.
      - name: Publish to Central Portal
        if: false
        uses: burrunan/gradle-cache-action@v1
        with:
          arguments: publishAggregationToCentralPortal
          # language=properties
          properties: |
            release=true
            centralPortalPublishingType=USER_MANAGED
        env:
          CENTRAL_PORTAL_USERNAME: ${{ secrets.MAVEN_USER }}
          CENTRAL_PORTAL_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          SIGNING_PGP_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          SIGNING_PGP_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Create git tag
        # language=bash
        run: |
          git config user.name "qubership-ci[bot]"
          git config user.email "qubership-ci[bot]@qubership.org"
          tag="v${{ steps.current_version.outputs.version }}"
          git tag "$tag"
          git push origin "$tag"

      - name: Publish GitHub release
        uses: release-drafter/release-drafter@v6
        id: publish_release
        with:
          disable-autolabeler: true
          publish: true
          latest: ${{ inputs.latest }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute next patch version
        id: next_version
        # language=bash
        run: |
          IFS='.' read -r majornext_version <<< "${{ steps.current_version.outputs.version }}"
          next_version="${major}.${minor}.$((patch + 1))"
          echo "version=$next_version" >> "$GITHUB_OUTPUT"

      - name: Update version in gradle.properties to ${{ steps.next_version.outputs.version }}
        uses: ./.github/actions/update_version
        with:
          version: ${{ steps.next_version.outputs.version }}
